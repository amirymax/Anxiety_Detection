from aiogram import Bot, Dispatcher, types
from aiogram import executor
from videoai.videoAi import VideoAI
from textai.textAI import TextAI
from audioai.audioAI import AudioAI
from variables import API_TOKEN, negative_message, half_negative_message


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
emotions = {'Text': None, 'Audio': None, 'Video': None}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # Send the welcome message
    await message.answer(
        """
üëã **–ü—Ä–∏–≤–µ—Ç!**


–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å *—É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏* –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö *—ç–º–æ—Ü–∏–π*.üí¨ 
–î–ª—è —ç—Ç–æ–≥–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∏–¥–µ–æ, –∏ —è –≤–∞–º –ø–æ–º–æ–≥—É.

**–ñ–¥—É –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è!**
""", parse_mode="markdown")


@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    await bot.send_message(message.chat.id, 'üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    text = message.text
    text_model = TextAI()
    emotional_state = text_model.predict(text)
    emotions['Text'] = emotional_state
    msg = ''
    if emotions['Audio'] == None:
        msg += ' –ê—É–¥–∏–æ'
    if emotions['Video'] == None:
        msg += ' –í–∏–¥–µ–æ'
    
    if msg:
        await bot.send_message(message.chat.id, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' + msg)
    else:
        anx = 0
        negative_states = []
        for i, j in emotions.items():
            if j in 'Negative Fear Angry Surprise Sad':
                anx += 1
                negative_states.append(i)
            emotions[i] = None
        if anx == 2:
            await bot.send_message(message.chat.id, half_negative_message, parse_mode="markdown")
        if anx == 3:
            await bot.send_message(message.chat.id, negative_message, parse_mode="markdown")
@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_text(message: types.Message):
    await bot.send_message(message.chat.id, 'üìù –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    voice_file_id = message.voice.file_id

    # Get the voice file path
    voice_file_path = 'audioai/audio_files/file.ogg'

    # Download the voice file
    voice_file = await bot.download_file_by_id(voice_file_id)

    # Save the voice file locally
    with open(voice_file_path, 'wb') as f:
        f.write(voice_file.read())

    # await message.reply("Voice message saved. Emotion detected from the provided voice message.")
    audio_model = AudioAI()
    emotional_state = audio_model.predict(voice_file_path)

    emotions['Audio'] = emotional_state
    msg = ''
    if emotions['Text'] == None:
        msg += ' –¢–µ–∫—Å—Ç'
    if emotions['Video'] == None:
        msg += ' –í–∏–¥–µ–æ'
    
    if msg:
        await bot.send_message(message.chat.id, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥–æ–ª–æ—Å—É –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' + msg)
    else:
        anx = 0
        negative_states = []
        for i, j in emotions.items():
            if j in 'Negative Fear Angry Surprise Sad':
                anx += 1
                negative_states.append(i)
            emotions[i] = None
        if anx == 2:
            await bot.send_message(message.chat.id, half_negative_message, parse_mode="markdown")
        if anx == 3:
            await bot.send_message(message.chat.id, negative_message, parse_mode="markdown")

@dp.message_handler(content_types=types.ContentType.VIDEO)
async def handle_video(message: types.Message):
    # Get the video file ID
    await bot.send_message(message.chat.id, 'üìù –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    video_file_id = message.video.file_id

    # Get the video file path
    video_file_path = 'videoai/video_files/file.mp4'

    # Download the video file
    video_file = await bot.download_file_by_id(video_file_id)

    # Save the video file locally
    with open(video_file_path, 'wb') as f:
        f.write(video_file.read())


    video_model = VideoAI()
    predictions = []
    video_model.predict(video_file_path, predictions)
    negative =  0
    for i in predictions:
        if i == 'neutral':
            continue
        elif i in 'fear angry surprise sad':
            negative += 1
        else:
            negative -= 1
    if negative:
        emotions['Video'] = 'Negative'

    msg = ''
    if emotions['Text'] == None:
        msg += ' –¢–µ–∫—Å—Ç'
    if emotions['Audio'] == None:
        msg += ' –ê—É–¥–∏–æ'
    
    if msg:
        await bot.send_message(message.chat.id, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' + msg)
    else:
        anx = 0
        negative_states = []
        for i, j in emotions.items():
            if j in 'Negative fear angry surprise sad':
                anx += 1
                negative_states.append(i)
            emotions[i] = None
        if anx == 2:
            await bot.send_message(message.chat.id, half_negative_message, parse_mode="markdown")
        if anx == 3:
            await bot.send_message(message.chat.id, negative_message, parse_mode="markdown")
        emotions.clear()
@dp.message_handler(content_types=types.ContentType.VIDEO_NOTE)
async def handle_video(message: types.Message):
    # Get the video file ID
    await bot.send_message(message.chat.id, 'üìù –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    video_file_id = message.video_note.file_id

    # Get the video file path
    video_file_path = 'videoai/video_files/file.mp4'

    # Download the video file
    video_file = await bot.download_file_by_id(video_file_id)

    # Save the video file locally
    with open(video_file_path, 'wb') as f:
        f.write(video_file.read())


    video_model = VideoAI()
    predictions = []
    video_model.predict(video_file_path, predictions)
    negative =  0
    for i in predictions:
        if i == 'neutral':
            continue
        elif i in 'fear angry surprise sad':
            negative += 1
        else:
            negative -= 1
    if negative:
        emotions['Video'] = 'Negative'

    msg = ''
    if emotions['Text'] == None:
        msg += ' –¢–µ–∫—Å—Ç'
    if emotions['Audio'] == None:
        msg += ' –ê—É–¥–∏–æ'
    
    if msg:
        await bot.send_message(message.chat.id, '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ' + msg)
    else:
        anx = 0
        negative_states = []
        for i, j in emotions.items():
            if j in 'Negative fear angry surprise sad':
                anx += 1
                negative_states.append(i)
            emotions[i] = None
        if anx == 2:
            await bot.send_message(message.chat.id, half_negative_message, parse_mode="markdown")
        if anx == 3:
            await bot.send_message(message.chat.id, negative_message, parse_mode="markdown")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
